# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.9
#
# <auto-generated>
#
# Generated from file `home.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module smarthome
_M_smarthome = Ice.openModule('smarthome')
__name__ = 'smarthome'

_M_smarthome._t_Device = IcePy.defineValue('::smarthome::Device', Ice.Value, -1, (), False, True, None, ())

if 'DevicePrx' not in _M_smarthome.__dict__:
    _M_smarthome.DevicePrx = Ice.createTempClass()
    class DevicePrx(Ice.ObjectPrx):

        def getName(self, context=None):
            return _M_smarthome.Device._op_getName.invoke(self, ((), context))

        def getNameAsync(self, context=None):
            return _M_smarthome.Device._op_getName.invokeAsync(self, ((), context))

        def begin_getName(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthome.Device._op_getName.begin(self, ((), _response, _ex, _sent, context))

        def end_getName(self, _r):
            return _M_smarthome.Device._op_getName.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_smarthome.DevicePrx.ice_checkedCast(proxy, '::smarthome::Device', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_smarthome.DevicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::smarthome::Device'
    _M_smarthome._t_DevicePrx = IcePy.defineProxy('::smarthome::Device', DevicePrx)

    _M_smarthome.DevicePrx = DevicePrx
    del DevicePrx

    _M_smarthome.Device = Ice.createTempClass()
    class Device(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::smarthome::Device')

        def ice_id(self, current=None):
            return '::smarthome::Device'

        @staticmethod
        def ice_staticId():
            return '::smarthome::Device'

        def getName(self, current=None):
            raise NotImplementedError("servant method 'getName' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_smarthome._t_DeviceDisp)

        __repr__ = __str__

    _M_smarthome._t_DeviceDisp = IcePy.defineClass('::smarthome::Device', Device, (), None, ())
    Device._ice_type = _M_smarthome._t_DeviceDisp

    Device._op_getName = IcePy.Operation('getName', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())

    _M_smarthome.Device = Device
    del Device

if 'DeviceState' not in _M_smarthome.__dict__:
    _M_smarthome.DeviceState = Ice.createTempClass()
    class DeviceState(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    DeviceState.ON = DeviceState("ON", 0)
    DeviceState.OFF = DeviceState("OFF", 1)
    DeviceState._enumerators = { 0:DeviceState.ON, 1:DeviceState.OFF }

    _M_smarthome._t_DeviceState = IcePy.defineEnum('::smarthome::DeviceState', DeviceState, (), DeviceState._enumerators)

    _M_smarthome.DeviceState = DeviceState
    del DeviceState

_M_smarthome._t_Lamp = IcePy.defineValue('::smarthome::Lamp', Ice.Value, -1, (), False, True, None, ())

if 'LampPrx' not in _M_smarthome.__dict__:
    _M_smarthome.LampPrx = Ice.createTempClass()
    class LampPrx(_M_smarthome.DevicePrx):

        def changeState(self, context=None):
            return _M_smarthome.Lamp._op_changeState.invoke(self, ((), context))

        def changeStateAsync(self, context=None):
            return _M_smarthome.Lamp._op_changeState.invokeAsync(self, ((), context))

        def begin_changeState(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthome.Lamp._op_changeState.begin(self, ((), _response, _ex, _sent, context))

        def end_changeState(self, _r):
            return _M_smarthome.Lamp._op_changeState.end(self, _r)

        def getState(self, context=None):
            return _M_smarthome.Lamp._op_getState.invoke(self, ((), context))

        def getStateAsync(self, context=None):
            return _M_smarthome.Lamp._op_getState.invokeAsync(self, ((), context))

        def begin_getState(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthome.Lamp._op_getState.begin(self, ((), _response, _ex, _sent, context))

        def end_getState(self, _r):
            return _M_smarthome.Lamp._op_getState.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_smarthome.LampPrx.ice_checkedCast(proxy, '::smarthome::Lamp', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_smarthome.LampPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::smarthome::Lamp'
    _M_smarthome._t_LampPrx = IcePy.defineProxy('::smarthome::Lamp', LampPrx)

    _M_smarthome.LampPrx = LampPrx
    del LampPrx

    _M_smarthome.Lamp = Ice.createTempClass()
    class Lamp(_M_smarthome.Device):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::smarthome::Device', '::smarthome::Lamp')

        def ice_id(self, current=None):
            return '::smarthome::Lamp'

        @staticmethod
        def ice_staticId():
            return '::smarthome::Lamp'

        def changeState(self, current=None):
            raise NotImplementedError("servant method 'changeState' not implemented")

        def getState(self, current=None):
            raise NotImplementedError("servant method 'getState' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_smarthome._t_LampDisp)

        __repr__ = __str__

    _M_smarthome._t_LampDisp = IcePy.defineClass('::smarthome::Lamp', Lamp, (), None, (_M_smarthome._t_DeviceDisp,))
    Lamp._ice_type = _M_smarthome._t_LampDisp

    Lamp._op_changeState = IcePy.Operation('changeState', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Lamp._op_getState = IcePy.Operation('getState', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_smarthome._t_DeviceState, False, 0), ())

    _M_smarthome.Lamp = Lamp
    del Lamp

if 'LampColor' not in _M_smarthome.__dict__:
    _M_smarthome.LampColor = Ice.createTempClass()
    class LampColor(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    LampColor.RED = LampColor("RED", 0)
    LampColor.GREEN = LampColor("GREEN", 1)
    LampColor.BLUE = LampColor("BLUE", 2)
    LampColor.WHITE = LampColor("WHITE", 3)
    LampColor.ORANGE = LampColor("ORANGE", 4)
    LampColor._enumerators = { 0:LampColor.RED, 1:LampColor.GREEN, 2:LampColor.BLUE, 3:LampColor.WHITE, 4:LampColor.ORANGE }

    _M_smarthome._t_LampColor = IcePy.defineEnum('::smarthome::LampColor', LampColor, (), LampColor._enumerators)

    _M_smarthome.LampColor = LampColor
    del LampColor

_M_smarthome._t_ColorLamp = IcePy.defineValue('::smarthome::ColorLamp', Ice.Value, -1, (), False, True, None, ())

if 'ColorLampPrx' not in _M_smarthome.__dict__:
    _M_smarthome.ColorLampPrx = Ice.createTempClass()
    class ColorLampPrx(_M_smarthome.LampPrx):

        def setColor(self, color, context=None):
            return _M_smarthome.ColorLamp._op_setColor.invoke(self, ((color, ), context))

        def setColorAsync(self, color, context=None):
            return _M_smarthome.ColorLamp._op_setColor.invokeAsync(self, ((color, ), context))

        def begin_setColor(self, color, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthome.ColorLamp._op_setColor.begin(self, ((color, ), _response, _ex, _sent, context))

        def end_setColor(self, _r):
            return _M_smarthome.ColorLamp._op_setColor.end(self, _r)

        def getColor(self, context=None):
            return _M_smarthome.ColorLamp._op_getColor.invoke(self, ((), context))

        def getColorAsync(self, context=None):
            return _M_smarthome.ColorLamp._op_getColor.invokeAsync(self, ((), context))

        def begin_getColor(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthome.ColorLamp._op_getColor.begin(self, ((), _response, _ex, _sent, context))

        def end_getColor(self, _r):
            return _M_smarthome.ColorLamp._op_getColor.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_smarthome.ColorLampPrx.ice_checkedCast(proxy, '::smarthome::ColorLamp', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_smarthome.ColorLampPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::smarthome::ColorLamp'
    _M_smarthome._t_ColorLampPrx = IcePy.defineProxy('::smarthome::ColorLamp', ColorLampPrx)

    _M_smarthome.ColorLampPrx = ColorLampPrx
    del ColorLampPrx

    _M_smarthome.ColorLamp = Ice.createTempClass()
    class ColorLamp(_M_smarthome.Lamp):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::smarthome::ColorLamp', '::smarthome::Device', '::smarthome::Lamp')

        def ice_id(self, current=None):
            return '::smarthome::ColorLamp'

        @staticmethod
        def ice_staticId():
            return '::smarthome::ColorLamp'

        def setColor(self, color, current=None):
            raise NotImplementedError("servant method 'setColor' not implemented")

        def getColor(self, current=None):
            raise NotImplementedError("servant method 'getColor' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_smarthome._t_ColorLampDisp)

        __repr__ = __str__

    _M_smarthome._t_ColorLampDisp = IcePy.defineClass('::smarthome::ColorLamp', ColorLamp, (), None, (_M_smarthome._t_LampDisp,))
    ColorLamp._ice_type = _M_smarthome._t_ColorLampDisp

    ColorLamp._op_setColor = IcePy.Operation('setColor', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_smarthome._t_LampColor, False, 0),), (), None, ())
    ColorLamp._op_getColor = IcePy.Operation('getColor', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_smarthome._t_LampColor, False, 0), ())

    _M_smarthome.ColorLamp = ColorLamp
    del ColorLamp

if 'InvalidBrightnessValueException' not in _M_smarthome.__dict__:
    _M_smarthome.InvalidBrightnessValueException = Ice.createTempClass()
    class InvalidBrightnessValueException(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::smarthome::InvalidBrightnessValueException'

    _M_smarthome._t_InvalidBrightnessValueException = IcePy.defineException('::smarthome::InvalidBrightnessValueException', InvalidBrightnessValueException, (), False, None, ())
    InvalidBrightnessValueException._ice_type = _M_smarthome._t_InvalidBrightnessValueException

    _M_smarthome.InvalidBrightnessValueException = InvalidBrightnessValueException
    del InvalidBrightnessValueException

if 'InvalidBulbIdException' not in _M_smarthome.__dict__:
    _M_smarthome.InvalidBulbIdException = Ice.createTempClass()
    class InvalidBulbIdException(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::smarthome::InvalidBulbIdException'

    _M_smarthome._t_InvalidBulbIdException = IcePy.defineException('::smarthome::InvalidBulbIdException', InvalidBulbIdException, (), False, None, ())
    InvalidBulbIdException._ice_type = _M_smarthome._t_InvalidBulbIdException

    _M_smarthome.InvalidBulbIdException = InvalidBulbIdException
    del InvalidBulbIdException

if 'InvalidBulbsCountException' not in _M_smarthome.__dict__:
    _M_smarthome.InvalidBulbsCountException = Ice.createTempClass()
    class InvalidBulbsCountException(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::smarthome::InvalidBulbsCountException'

    _M_smarthome._t_InvalidBulbsCountException = IcePy.defineException('::smarthome::InvalidBulbsCountException', InvalidBulbsCountException, (), False, None, ())
    InvalidBulbsCountException._ice_type = _M_smarthome._t_InvalidBulbsCountException

    _M_smarthome.InvalidBulbsCountException = InvalidBulbsCountException
    del InvalidBulbsCountException

if '_t_BrightnessList' not in _M_smarthome.__dict__:
    _M_smarthome._t_BrightnessList = IcePy.defineSequence('::smarthome::BrightnessList', (), IcePy._t_int)

_M_smarthome._t_MultipleDimmableLamp = IcePy.defineValue('::smarthome::MultipleDimmableLamp', Ice.Value, -1, (), False, True, None, ())

if 'MultipleDimmableLampPrx' not in _M_smarthome.__dict__:
    _M_smarthome.MultipleDimmableLampPrx = Ice.createTempClass()
    class MultipleDimmableLampPrx(_M_smarthome.LampPrx):

        def setOneBulbBrightness(self, bulbId, brightness, context=None):
            return _M_smarthome.MultipleDimmableLamp._op_setOneBulbBrightness.invoke(self, ((bulbId, brightness), context))

        def setOneBulbBrightnessAsync(self, bulbId, brightness, context=None):
            return _M_smarthome.MultipleDimmableLamp._op_setOneBulbBrightness.invokeAsync(self, ((bulbId, brightness), context))

        def begin_setOneBulbBrightness(self, bulbId, brightness, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthome.MultipleDimmableLamp._op_setOneBulbBrightness.begin(self, ((bulbId, brightness), _response, _ex, _sent, context))

        def end_setOneBulbBrightness(self, _r):
            return _M_smarthome.MultipleDimmableLamp._op_setOneBulbBrightness.end(self, _r)

        def setAllBulbsBrightness(self, brightnessList, context=None):
            return _M_smarthome.MultipleDimmableLamp._op_setAllBulbsBrightness.invoke(self, ((brightnessList, ), context))

        def setAllBulbsBrightnessAsync(self, brightnessList, context=None):
            return _M_smarthome.MultipleDimmableLamp._op_setAllBulbsBrightness.invokeAsync(self, ((brightnessList, ), context))

        def begin_setAllBulbsBrightness(self, brightnessList, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthome.MultipleDimmableLamp._op_setAllBulbsBrightness.begin(self, ((brightnessList, ), _response, _ex, _sent, context))

        def end_setAllBulbsBrightness(self, _r):
            return _M_smarthome.MultipleDimmableLamp._op_setAllBulbsBrightness.end(self, _r)

        def getBulbBrightness(self, bulbId, context=None):
            return _M_smarthome.MultipleDimmableLamp._op_getBulbBrightness.invoke(self, ((bulbId, ), context))

        def getBulbBrightnessAsync(self, bulbId, context=None):
            return _M_smarthome.MultipleDimmableLamp._op_getBulbBrightness.invokeAsync(self, ((bulbId, ), context))

        def begin_getBulbBrightness(self, bulbId, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthome.MultipleDimmableLamp._op_getBulbBrightness.begin(self, ((bulbId, ), _response, _ex, _sent, context))

        def end_getBulbBrightness(self, _r):
            return _M_smarthome.MultipleDimmableLamp._op_getBulbBrightness.end(self, _r)

        def getAllBulbsBrightness(self, context=None):
            return _M_smarthome.MultipleDimmableLamp._op_getAllBulbsBrightness.invoke(self, ((), context))

        def getAllBulbsBrightnessAsync(self, context=None):
            return _M_smarthome.MultipleDimmableLamp._op_getAllBulbsBrightness.invokeAsync(self, ((), context))

        def begin_getAllBulbsBrightness(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthome.MultipleDimmableLamp._op_getAllBulbsBrightness.begin(self, ((), _response, _ex, _sent, context))

        def end_getAllBulbsBrightness(self, _r):
            return _M_smarthome.MultipleDimmableLamp._op_getAllBulbsBrightness.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_smarthome.MultipleDimmableLampPrx.ice_checkedCast(proxy, '::smarthome::MultipleDimmableLamp', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_smarthome.MultipleDimmableLampPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::smarthome::MultipleDimmableLamp'
    _M_smarthome._t_MultipleDimmableLampPrx = IcePy.defineProxy('::smarthome::MultipleDimmableLamp', MultipleDimmableLampPrx)

    _M_smarthome.MultipleDimmableLampPrx = MultipleDimmableLampPrx
    del MultipleDimmableLampPrx

    _M_smarthome.MultipleDimmableLamp = Ice.createTempClass()
    class MultipleDimmableLamp(_M_smarthome.Lamp):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::smarthome::Device', '::smarthome::Lamp', '::smarthome::MultipleDimmableLamp')

        def ice_id(self, current=None):
            return '::smarthome::MultipleDimmableLamp'

        @staticmethod
        def ice_staticId():
            return '::smarthome::MultipleDimmableLamp'

        def setOneBulbBrightness(self, bulbId, brightness, current=None):
            raise NotImplementedError("servant method 'setOneBulbBrightness' not implemented")

        def setAllBulbsBrightness(self, brightnessList, current=None):
            raise NotImplementedError("servant method 'setAllBulbsBrightness' not implemented")

        def getBulbBrightness(self, bulbId, current=None):
            raise NotImplementedError("servant method 'getBulbBrightness' not implemented")

        def getAllBulbsBrightness(self, current=None):
            raise NotImplementedError("servant method 'getAllBulbsBrightness' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_smarthome._t_MultipleDimmableLampDisp)

        __repr__ = __str__

    _M_smarthome._t_MultipleDimmableLampDisp = IcePy.defineClass('::smarthome::MultipleDimmableLamp', MultipleDimmableLamp, (), None, (_M_smarthome._t_LampDisp,))
    MultipleDimmableLamp._ice_type = _M_smarthome._t_MultipleDimmableLampDisp

    MultipleDimmableLamp._op_setOneBulbBrightness = IcePy.Operation('setOneBulbBrightness', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), None, (_M_smarthome._t_InvalidBulbIdException, _M_smarthome._t_InvalidBrightnessValueException))
    MultipleDimmableLamp._op_setAllBulbsBrightness = IcePy.Operation('setAllBulbsBrightness', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_smarthome._t_BrightnessList, False, 0),), (), None, (_M_smarthome._t_InvalidBrightnessValueException, _M_smarthome._t_InvalidBulbsCountException))
    MultipleDimmableLamp._op_getBulbBrightness = IcePy.Operation('getBulbBrightness', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), IcePy._t_int, False, 0), (_M_smarthome._t_InvalidBulbIdException,))
    MultipleDimmableLamp._op_getAllBulbsBrightness = IcePy.Operation('getAllBulbsBrightness', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_smarthome._t_BrightnessList, False, 0), ())

    _M_smarthome.MultipleDimmableLamp = MultipleDimmableLamp
    del MultipleDimmableLamp

if 'InvalidShutterPositionException' not in _M_smarthome.__dict__:
    _M_smarthome.InvalidShutterPositionException = Ice.createTempClass()
    class InvalidShutterPositionException(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::smarthome::InvalidShutterPositionException'

    _M_smarthome._t_InvalidShutterPositionException = IcePy.defineException('::smarthome::InvalidShutterPositionException', InvalidShutterPositionException, (), False, None, ())
    InvalidShutterPositionException._ice_type = _M_smarthome._t_InvalidShutterPositionException

    _M_smarthome.InvalidShutterPositionException = InvalidShutterPositionException
    del InvalidShutterPositionException

_M_smarthome._t_Shutters = IcePy.defineValue('::smarthome::Shutters', Ice.Value, -1, (), False, True, None, ())

if 'ShuttersPrx' not in _M_smarthome.__dict__:
    _M_smarthome.ShuttersPrx = Ice.createTempClass()
    class ShuttersPrx(_M_smarthome.DevicePrx):

        def setPosition(self, position, context=None):
            return _M_smarthome.Shutters._op_setPosition.invoke(self, ((position, ), context))

        def setPositionAsync(self, position, context=None):
            return _M_smarthome.Shutters._op_setPosition.invokeAsync(self, ((position, ), context))

        def begin_setPosition(self, position, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthome.Shutters._op_setPosition.begin(self, ((position, ), _response, _ex, _sent, context))

        def end_setPosition(self, _r):
            return _M_smarthome.Shutters._op_setPosition.end(self, _r)

        def getPosition(self, context=None):
            return _M_smarthome.Shutters._op_getPosition.invoke(self, ((), context))

        def getPositionAsync(self, context=None):
            return _M_smarthome.Shutters._op_getPosition.invokeAsync(self, ((), context))

        def begin_getPosition(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthome.Shutters._op_getPosition.begin(self, ((), _response, _ex, _sent, context))

        def end_getPosition(self, _r):
            return _M_smarthome.Shutters._op_getPosition.end(self, _r)

        def moveUp(self, change, context=None):
            return _M_smarthome.Shutters._op_moveUp.invoke(self, ((change, ), context))

        def moveUpAsync(self, change, context=None):
            return _M_smarthome.Shutters._op_moveUp.invokeAsync(self, ((change, ), context))

        def begin_moveUp(self, change, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthome.Shutters._op_moveUp.begin(self, ((change, ), _response, _ex, _sent, context))

        def end_moveUp(self, _r):
            return _M_smarthome.Shutters._op_moveUp.end(self, _r)

        def moveDown(self, change, context=None):
            return _M_smarthome.Shutters._op_moveDown.invoke(self, ((change, ), context))

        def moveDownAsync(self, change, context=None):
            return _M_smarthome.Shutters._op_moveDown.invokeAsync(self, ((change, ), context))

        def begin_moveDown(self, change, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthome.Shutters._op_moveDown.begin(self, ((change, ), _response, _ex, _sent, context))

        def end_moveDown(self, _r):
            return _M_smarthome.Shutters._op_moveDown.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_smarthome.ShuttersPrx.ice_checkedCast(proxy, '::smarthome::Shutters', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_smarthome.ShuttersPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::smarthome::Shutters'
    _M_smarthome._t_ShuttersPrx = IcePy.defineProxy('::smarthome::Shutters', ShuttersPrx)

    _M_smarthome.ShuttersPrx = ShuttersPrx
    del ShuttersPrx

    _M_smarthome.Shutters = Ice.createTempClass()
    class Shutters(_M_smarthome.Device):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::smarthome::Device', '::smarthome::Shutters')

        def ice_id(self, current=None):
            return '::smarthome::Shutters'

        @staticmethod
        def ice_staticId():
            return '::smarthome::Shutters'

        def setPosition(self, position, current=None):
            raise NotImplementedError("servant method 'setPosition' not implemented")

        def getPosition(self, current=None):
            raise NotImplementedError("servant method 'getPosition' not implemented")

        def moveUp(self, change, current=None):
            raise NotImplementedError("servant method 'moveUp' not implemented")

        def moveDown(self, change, current=None):
            raise NotImplementedError("servant method 'moveDown' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_smarthome._t_ShuttersDisp)

        __repr__ = __str__

    _M_smarthome._t_ShuttersDisp = IcePy.defineClass('::smarthome::Shutters', Shutters, (), None, (_M_smarthome._t_DeviceDisp,))
    Shutters._ice_type = _M_smarthome._t_ShuttersDisp

    Shutters._op_setPosition = IcePy.Operation('setPosition', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_int, False, 0),), (), None, (_M_smarthome._t_InvalidShutterPositionException,))
    Shutters._op_getPosition = IcePy.Operation('getPosition', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    Shutters._op_moveUp = IcePy.Operation('moveUp', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())
    Shutters._op_moveDown = IcePy.Operation('moveDown', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())

    _M_smarthome.Shutters = Shutters
    del Shutters

if 'Position' not in _M_smarthome.__dict__:
    _M_smarthome.Position = Ice.createTempClass()
    class Position(object):
        def __init__(self, xPosition=0, yPosition=0):
            self.xPosition = xPosition
            self.yPosition = yPosition

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.xPosition)
            _h = 5 * _h + Ice.getHash(self.yPosition)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_smarthome.Position):
                return NotImplemented
            else:
                if self.xPosition is None or other.xPosition is None:
                    if self.xPosition != other.xPosition:
                        return (-1 if self.xPosition is None else 1)
                else:
                    if self.xPosition < other.xPosition:
                        return -1
                    elif self.xPosition > other.xPosition:
                        return 1
                if self.yPosition is None or other.yPosition is None:
                    if self.yPosition != other.yPosition:
                        return (-1 if self.yPosition is None else 1)
                else:
                    if self.yPosition < other.yPosition:
                        return -1
                    elif self.yPosition > other.yPosition:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_smarthome._t_Position)

        __repr__ = __str__

    _M_smarthome._t_Position = IcePy.defineStruct('::smarthome::Position', Position, (), (
        ('xPosition', (), IcePy._t_int),
        ('yPosition', (), IcePy._t_int)
    ))

    _M_smarthome.Position = Position
    del Position

_M_smarthome._t_VacuumCleaner = IcePy.defineValue('::smarthome::VacuumCleaner', Ice.Value, -1, (), False, True, None, ())

if 'VacuumCleanerPrx' not in _M_smarthome.__dict__:
    _M_smarthome.VacuumCleanerPrx = Ice.createTempClass()
    class VacuumCleanerPrx(_M_smarthome.DevicePrx):

        def setPosition(self, position, context=None):
            return _M_smarthome.VacuumCleaner._op_setPosition.invoke(self, ((position, ), context))

        def setPositionAsync(self, position, context=None):
            return _M_smarthome.VacuumCleaner._op_setPosition.invokeAsync(self, ((position, ), context))

        def begin_setPosition(self, position, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthome.VacuumCleaner._op_setPosition.begin(self, ((position, ), _response, _ex, _sent, context))

        def end_setPosition(self, _r):
            return _M_smarthome.VacuumCleaner._op_setPosition.end(self, _r)

        def getPosition(self, context=None):
            return _M_smarthome.VacuumCleaner._op_getPosition.invoke(self, ((), context))

        def getPositionAsync(self, context=None):
            return _M_smarthome.VacuumCleaner._op_getPosition.invokeAsync(self, ((), context))

        def begin_getPosition(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthome.VacuumCleaner._op_getPosition.begin(self, ((), _response, _ex, _sent, context))

        def end_getPosition(self, _r):
            return _M_smarthome.VacuumCleaner._op_getPosition.end(self, _r)

        def setState(self, state, context=None):
            return _M_smarthome.VacuumCleaner._op_setState.invoke(self, ((state, ), context))

        def setStateAsync(self, state, context=None):
            return _M_smarthome.VacuumCleaner._op_setState.invokeAsync(self, ((state, ), context))

        def begin_setState(self, state, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthome.VacuumCleaner._op_setState.begin(self, ((state, ), _response, _ex, _sent, context))

        def end_setState(self, _r):
            return _M_smarthome.VacuumCleaner._op_setState.end(self, _r)

        def getState(self, context=None):
            return _M_smarthome.VacuumCleaner._op_getState.invoke(self, ((), context))

        def getStateAsync(self, context=None):
            return _M_smarthome.VacuumCleaner._op_getState.invokeAsync(self, ((), context))

        def begin_getState(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthome.VacuumCleaner._op_getState.begin(self, ((), _response, _ex, _sent, context))

        def end_getState(self, _r):
            return _M_smarthome.VacuumCleaner._op_getState.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_smarthome.VacuumCleanerPrx.ice_checkedCast(proxy, '::smarthome::VacuumCleaner', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_smarthome.VacuumCleanerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::smarthome::VacuumCleaner'
    _M_smarthome._t_VacuumCleanerPrx = IcePy.defineProxy('::smarthome::VacuumCleaner', VacuumCleanerPrx)

    _M_smarthome.VacuumCleanerPrx = VacuumCleanerPrx
    del VacuumCleanerPrx

    _M_smarthome.VacuumCleaner = Ice.createTempClass()
    class VacuumCleaner(_M_smarthome.Device):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::smarthome::Device', '::smarthome::VacuumCleaner')

        def ice_id(self, current=None):
            return '::smarthome::VacuumCleaner'

        @staticmethod
        def ice_staticId():
            return '::smarthome::VacuumCleaner'

        def setPosition(self, position, current=None):
            raise NotImplementedError("servant method 'setPosition' not implemented")

        def getPosition(self, current=None):
            raise NotImplementedError("servant method 'getPosition' not implemented")

        def setState(self, state, current=None):
            raise NotImplementedError("servant method 'setState' not implemented")

        def getState(self, current=None):
            raise NotImplementedError("servant method 'getState' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_smarthome._t_VacuumCleanerDisp)

        __repr__ = __str__

    _M_smarthome._t_VacuumCleanerDisp = IcePy.defineClass('::smarthome::VacuumCleaner', VacuumCleaner, (), None, (_M_smarthome._t_DeviceDisp,))
    VacuumCleaner._ice_type = _M_smarthome._t_VacuumCleanerDisp

    VacuumCleaner._op_setPosition = IcePy.Operation('setPosition', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_smarthome._t_Position, False, 0),), (), None, ())
    VacuumCleaner._op_getPosition = IcePy.Operation('getPosition', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_smarthome._t_Position, False, 0), ())
    VacuumCleaner._op_setState = IcePy.Operation('setState', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_smarthome._t_DeviceState, False, 0),), (), None, ())
    VacuumCleaner._op_getState = IcePy.Operation('getState', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_smarthome._t_DeviceState, False, 0), ())

    _M_smarthome.VacuumCleaner = VacuumCleaner
    del VacuumCleaner

if 'DeviceInfo' not in _M_smarthome.__dict__:
    _M_smarthome.DeviceInfo = Ice.createTempClass()
    class DeviceInfo(object):
        def __init__(self, name='', category='', serverName=''):
            self.name = name
            self.category = category
            self.serverName = serverName

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.name)
            _h = 5 * _h + Ice.getHash(self.category)
            _h = 5 * _h + Ice.getHash(self.serverName)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_smarthome.DeviceInfo):
                return NotImplemented
            else:
                if self.name is None or other.name is None:
                    if self.name != other.name:
                        return (-1 if self.name is None else 1)
                else:
                    if self.name < other.name:
                        return -1
                    elif self.name > other.name:
                        return 1
                if self.category is None or other.category is None:
                    if self.category != other.category:
                        return (-1 if self.category is None else 1)
                else:
                    if self.category < other.category:
                        return -1
                    elif self.category > other.category:
                        return 1
                if self.serverName is None or other.serverName is None:
                    if self.serverName != other.serverName:
                        return (-1 if self.serverName is None else 1)
                else:
                    if self.serverName < other.serverName:
                        return -1
                    elif self.serverName > other.serverName:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_smarthome._t_DeviceInfo)

        __repr__ = __str__

    _M_smarthome._t_DeviceInfo = IcePy.defineStruct('::smarthome::DeviceInfo', DeviceInfo, (), (
        ('name', (), IcePy._t_string),
        ('category', (), IcePy._t_string),
        ('serverName', (), IcePy._t_string)
    ))

    _M_smarthome.DeviceInfo = DeviceInfo
    del DeviceInfo

if '_t_DeviceInfos' not in _M_smarthome.__dict__:
    _M_smarthome._t_DeviceInfos = IcePy.defineSequence('::smarthome::DeviceInfos', (), _M_smarthome._t_DeviceInfo)

_M_smarthome._t_DeviceInfoProvider = IcePy.defineValue('::smarthome::DeviceInfoProvider', Ice.Value, -1, (), False, True, None, ())

if 'DeviceInfoProviderPrx' not in _M_smarthome.__dict__:
    _M_smarthome.DeviceInfoProviderPrx = Ice.createTempClass()
    class DeviceInfoProviderPrx(Ice.ObjectPrx):

        def getDeviceInfos(self, context=None):
            return _M_smarthome.DeviceInfoProvider._op_getDeviceInfos.invoke(self, ((), context))

        def getDeviceInfosAsync(self, context=None):
            return _M_smarthome.DeviceInfoProvider._op_getDeviceInfos.invokeAsync(self, ((), context))

        def begin_getDeviceInfos(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthome.DeviceInfoProvider._op_getDeviceInfos.begin(self, ((), _response, _ex, _sent, context))

        def end_getDeviceInfos(self, _r):
            return _M_smarthome.DeviceInfoProvider._op_getDeviceInfos.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_smarthome.DeviceInfoProviderPrx.ice_checkedCast(proxy, '::smarthome::DeviceInfoProvider', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_smarthome.DeviceInfoProviderPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::smarthome::DeviceInfoProvider'
    _M_smarthome._t_DeviceInfoProviderPrx = IcePy.defineProxy('::smarthome::DeviceInfoProvider', DeviceInfoProviderPrx)

    _M_smarthome.DeviceInfoProviderPrx = DeviceInfoProviderPrx
    del DeviceInfoProviderPrx

    _M_smarthome.DeviceInfoProvider = Ice.createTempClass()
    class DeviceInfoProvider(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::smarthome::DeviceInfoProvider')

        def ice_id(self, current=None):
            return '::smarthome::DeviceInfoProvider'

        @staticmethod
        def ice_staticId():
            return '::smarthome::DeviceInfoProvider'

        def getDeviceInfos(self, current=None):
            raise NotImplementedError("servant method 'getDeviceInfos' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_smarthome._t_DeviceInfoProviderDisp)

        __repr__ = __str__

    _M_smarthome._t_DeviceInfoProviderDisp = IcePy.defineClass('::smarthome::DeviceInfoProvider', DeviceInfoProvider, (), None, ())
    DeviceInfoProvider._ice_type = _M_smarthome._t_DeviceInfoProviderDisp

    DeviceInfoProvider._op_getDeviceInfos = IcePy.Operation('getDeviceInfos', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_smarthome._t_DeviceInfos, False, 0), ())

    _M_smarthome.DeviceInfoProvider = DeviceInfoProvider
    del DeviceInfoProvider

# End of module smarthome
