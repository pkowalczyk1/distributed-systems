/**
 * @fileoverview gRPC-Web generated client stub for webservice
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.12.4
// source: proto/web_service.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.webservice = require('./web_service_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.webservice.WebServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.webservice.WebServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.webservice.NumberType,
 *   !proto.webservice.NumberType>}
 */
const methodDescriptor_WebService_Factorial = new grpc.web.MethodDescriptor(
  '/webservice.WebService/Factorial',
  grpc.web.MethodType.UNARY,
  proto.webservice.NumberType,
  proto.webservice.NumberType,
  /**
   * @param {!proto.webservice.NumberType} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.webservice.NumberType.deserializeBinary
);


/**
 * @param {!proto.webservice.NumberType} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.webservice.NumberType)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.webservice.NumberType>|undefined}
 *     The XHR Node Readable Stream
 */
proto.webservice.WebServiceClient.prototype.factorial =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/webservice.WebService/Factorial',
      request,
      metadata || {},
      methodDescriptor_WebService_Factorial,
      callback);
};


/**
 * @param {!proto.webservice.NumberType} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.webservice.NumberType>}
 *     Promise that resolves to the response
 */
proto.webservice.WebServicePromiseClient.prototype.factorial =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/webservice.WebService/Factorial',
      request,
      metadata || {},
      methodDescriptor_WebService_Factorial);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.webservice.StringType,
 *   !proto.webservice.StringType>}
 */
const methodDescriptor_WebService_ToUpperCase = new grpc.web.MethodDescriptor(
  '/webservice.WebService/ToUpperCase',
  grpc.web.MethodType.UNARY,
  proto.webservice.StringType,
  proto.webservice.StringType,
  /**
   * @param {!proto.webservice.StringType} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.webservice.StringType.deserializeBinary
);


/**
 * @param {!proto.webservice.StringType} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.webservice.StringType)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.webservice.StringType>|undefined}
 *     The XHR Node Readable Stream
 */
proto.webservice.WebServiceClient.prototype.toUpperCase =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/webservice.WebService/ToUpperCase',
      request,
      metadata || {},
      methodDescriptor_WebService_ToUpperCase,
      callback);
};


/**
 * @param {!proto.webservice.StringType} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.webservice.StringType>}
 *     Promise that resolves to the response
 */
proto.webservice.WebServicePromiseClient.prototype.toUpperCase =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/webservice.WebService/ToUpperCase',
      request,
      metadata || {},
      methodDescriptor_WebService_ToUpperCase);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.webservice.ListArgument,
 *   !proto.webservice.DoubleResult>}
 */
const methodDescriptor_WebService_GetAverage = new grpc.web.MethodDescriptor(
  '/webservice.WebService/GetAverage',
  grpc.web.MethodType.UNARY,
  proto.webservice.ListArgument,
  proto.webservice.DoubleResult,
  /**
   * @param {!proto.webservice.ListArgument} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.webservice.DoubleResult.deserializeBinary
);


/**
 * @param {!proto.webservice.ListArgument} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.webservice.DoubleResult)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.webservice.DoubleResult>|undefined}
 *     The XHR Node Readable Stream
 */
proto.webservice.WebServiceClient.prototype.getAverage =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/webservice.WebService/GetAverage',
      request,
      metadata || {},
      methodDescriptor_WebService_GetAverage,
      callback);
};


/**
 * @param {!proto.webservice.ListArgument} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.webservice.DoubleResult>}
 *     Promise that resolves to the response
 */
proto.webservice.WebServicePromiseClient.prototype.getAverage =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/webservice.WebService/GetAverage',
      request,
      metadata || {},
      methodDescriptor_WebService_GetAverage);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.webservice.NumberType,
 *   !proto.webservice.NumberType>}
 */
const methodDescriptor_WebService_GenerateRandomNumbers = new grpc.web.MethodDescriptor(
  '/webservice.WebService/GenerateRandomNumbers',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.webservice.NumberType,
  proto.webservice.NumberType,
  /**
   * @param {!proto.webservice.NumberType} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.webservice.NumberType.deserializeBinary
);


/**
 * @param {!proto.webservice.NumberType} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.webservice.NumberType>}
 *     The XHR Node Readable Stream
 */
proto.webservice.WebServiceClient.prototype.generateRandomNumbers =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/webservice.WebService/GenerateRandomNumbers',
      request,
      metadata || {},
      methodDescriptor_WebService_GenerateRandomNumbers);
};


/**
 * @param {!proto.webservice.NumberType} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.webservice.NumberType>}
 *     The XHR Node Readable Stream
 */
proto.webservice.WebServicePromiseClient.prototype.generateRandomNumbers =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/webservice.WebService/GenerateRandomNumbers',
      request,
      metadata || {},
      methodDescriptor_WebService_GenerateRandomNumbers);
};


module.exports = proto.webservice;

